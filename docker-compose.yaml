version: '3.9'

services:
  db:
    restart: always
    image: postgres:14.7-alpine
    container_name: movies_db
    env_file:
      - ./movies_admin/config/.env.docker
    expose:
      - '5432'
    volumes:
      - ./schema_design/movies_database.ddl:/docker-entrypoint-initdb.d/movies_database.sql
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d movies_database"]
      interval: 5s
      timeout: 5s
      retries: 5
  service:
    build: .
    container_name: movies_backend
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "python ./movies_admin/manage.py collectstatic --noinput
      && python ./movies_admin/manage.py makemigrations
      && python ./movies_admin/manage.py migrate movies --fake
      && python ./movies_admin/manage.py migrate
      && python ./sqlite_to_postgres/load_data.py
      && gunicorn -b 0.0.0.0:8000 --chdir /app/movies_admin config.wsgi:application"
    expose:
      - '8000'
    volumes:
      - static_value:/app/movies_admin/staticfiles/
      - media_value:/app/movies_admin/mediafiles/
      - ./movies_admin/config/.env.docker:/app/movies_admin/config/.env
  nginx:
    image: nginx:latest
    container_name: nginx_movies
    volumes:
      - ./movies_admin/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_value:/var/html/staticfiles
      - media_value:/var/html/mediafiles
    depends_on:
      - service
    ports:
      - '8000:80'
  elastic:
    image:  docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: elastic_movies
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
  etl_movies:
    build:
      context: .
      dockerfile: Dockerfile-ETL
    container_name: etl_movies
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    command: >
      bash -c "python load_movies_to_es.py"
    volumes:
      - ./movies_admin/config/.env.docker:/etl/movies_admin/config/.env
  etl_genres:
    build:
      context: .
      dockerfile: Dockerfile-ETL
    container_name: etl_genres
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    command: >
      bash -c "python load_genres_to_es.py"
    volumes:
      - ./movies_admin/config/.env.docker:/etl/movies_admin/config/.env
  etl_persons:
    build:
      context: .
      dockerfile: Dockerfile-ETL
    container_name: etl_persons
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
    command: >
      bash -c "python load_persons_to_es.py"
    volumes:
      - ./movies_admin/config/.env.docker:/etl/movies_admin/config/.env


volumes:
  postgres_data:
  static_value:
  media_value: